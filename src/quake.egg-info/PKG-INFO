Metadata-Version: 2.1
Name: quake
Version: 1.0.0
Summary: Quantum kernel classifier for neutrino physics applications
Home-page: https://github.com/qismib/QuaKe.git
Author: A. Giachero, M. Grossi, R. Moretti, M. Rossi
Author-email: andrea.giachero@mib.infn.it, michele.grossi@cern.ch, r.moretti9@campus.unimib.it, marco.rossi@cern.ch
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: Unix
Classifier: Topic :: Scientific/Engineering :: Physics
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: awkward
Requires-Dist: numpy
Requires-Dist: matplotlib
Requires-Dist: networkx>=2.8.8
Requires-Dist: pygad
Requires-Dist: qiskit==0.43.3
Requires-Dist: qiskit_machine_learning==0.6.1
Requires-Dist: scipy
Requires-Dist: scikit-learn
Requires-Dist: pydot
Requires-Dist: pyyaml
Requires-Dist: qutip
Requires-Dist: uproot
Requires-Dist: qiskit-aer
Provides-Extra: tf
Requires-Dist: tensorflow; extra == "tf"
Provides-Extra: tf-gpu
Requires-Dist: tensorflow-gpu; extra == "tf-gpu"
Provides-Extra: tf-cpu
Requires-Dist: tensorflow-cpu; extra == "tf-cpu"
Provides-Extra: tf-amd
Requires-Dist: tensorflow-rocm; extra == "tf-amd"

# QuaKe

QuaKe: quantum kernel classifier for neutrino physics applications

## Installation
:warning: **Note: we strongly recommend the use of a virtual environment**

The package can be installed with Python's `pip` package manager.

```bash
git clone https://github.com/qismib/QuaKe.git
cd QuaKe
pip install .[MODE]
```

The last command allows to install the `quake` program into the environment
python path.  

:warning: **Note: install the appropriate TensorFlow distribution**

`quake` assumes that the user has already installed the most optimized version
of TensorFlow for his platform. As such, by default, `pip` will not check it as
a requirement.

However, the user can also install it specifying a `MODE` option in the
`pip` command. The list below summarizes the valid choices for the `MODE` flag:

- `tf`: installs the `tensorflow` package
- `tf-cpu`: installs the `tensorflow-cpu` package
- `tf-gpu`: installs the `tensorflow-gpu` package
- `tf-amd`: installs the `tensorflow-rocm` package

## Running the code

In order to launch the code

```bash
quake <subcommand> [options]
```

Valid subcommands are: `datagen` | `train`.  
Use `quake <subcommand> --help` to print the correspondent help message.  
For example, the help message for `datagen` subcommand is:

```bash
$ quake datagen --help
usage: quake datagen [-h] [--output OUTPUT] [--force] [--show] runcard

generate voxelized dataset from root files

positional arguments:
  runcard               the input folder

optional arguments:
  -h, --help            show this help message and exit
  --output OUTPUT, -o OUTPUT
                        the output folder
  --force               overwrite existing files if present
  --show                show a track visual example
```

### Configuration cards

Models' parameter settings are stored in `yaml` files. The [cards](cards) folder
contains some examples.

### Data generation

Extracts histograms from 3D simulated energy depositions.

```bash
quake datagen <runcard.yaml> --output <output folder> [--force]
```

The `.yaml` runcard should store the path to dataset folder containing `.root`
files and the bin widths setting the histogram resolution.

An equivalent runcard is copied to the output folder in order to pass settings
to subsequent steps of the pipeline.

### Model training

Train a model on data extracted in folder.

```bash
quake train <folder> --model <modeltype>
```


